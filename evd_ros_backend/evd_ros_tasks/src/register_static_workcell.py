#!/usr/bin/env python3

'''
Registers robot and environment information with EvD.
'''

import rospy

from evd_script import Position, ReachSphere, PinchPoint, CollisionMesh,    \
    OccupancyZone, Machine, CubeRegion, Orientation, Pose, ThingType,       \
    Placeholder, Thing, Location, Joints, Trajectory

from evd_interfaces.frontend_interface import FrontendInterface

# NOTE: for future, we should probably think about hierarchical UUID structures.
MACHINE_UUID_3D_PRINTER = '3d-printer-machine-uuid'
MACHINE_UUID_ASSEMBLY_JIG = 'assembly-jig-machine-uuid'
MACHINE_UUID_BLADE_CONVEYOR = 'blade-conveyor-machine-uuid'
MACHINE_UUID_BLADE_FEEDER = 'blade-feeder-machine-uuid'
MACHINE_UUID_KNIFE_CONVEYOR = 'knife-conveyor-machine-uuid'
MACHINE_UUID_KNIFE_FEEDER = 'knife-feeder-machine-uuid'
ROBOT_UUID_UR3E = 'ur3e-robot-uuid'

#seconds (not realistic but ¯\_(ツ)_/¯)
PROCESS_TIME_3D_PRINTER = 5
PROCESS_TIME_KNIFE_FEEDER = 0
PROCESS_TIME_KNIFE_CONVEYOR = 5
PROCESS_TIME_BLADE_FEEDER = 0
PROCESS_TIME_BLADE_CONVEYOR = 5
PROCESS_TIME_ASSEMBLY_JIG = 0


class URRobotEnvironment:

    def __init__(self, debug=False):
        self._debug = debug

        # Define Reach Sphere
        self._reach_sphere = ReachSphere(
            radius=0.8, 
            link="simulated_base_link", 
            offset=Position(0,0,0.15))
        
        # Define Pinch Points
        self._pinch_points = [
            PinchPoint(
                link='simulated_shoulder_link', 
                radius=0.075, 
                length=0.2, 
                offset=Position.from_axis('z',-0.05)
            ),
            PinchPoint(
                link='simulated_upper_arm_link', 
                radius=0.075, 
                length=0.2, 
                offset=Position.from_axis('z',0.075)
            ),
            PinchPoint(
                link='simulated_forearm_link', 
                radius=0.075, 
                length=0.2, 
                offset=Position.from_axis('z',0.075)
            ),
            PinchPoint(
                link='simulated_wrist_1_link', 
                radius=0.06, 
                length=0.17, 
                offset=Position.from_axis('z',-0.05)
            ),
            PinchPoint(
                link='simulated_wrist_3_link', 
                radius=0.1, 
                length=0.16, 
                offset=Position.from_axis('z',0.1)
            )
        ]
        
        # Defining thing types needed for machine
        leftHandleThingType = ThingType(
            name='Left Handle',
            is_safe=True,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/left_handle.stl')
        rightHandleThingType = ThingType(
            name='Right Handle',
            is_safe=True,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/right_handle.stl')
        bladeThingType = ThingType(
            name='Blade',
            is_safe=False,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/blade.stl')
        transportJigThingType = ThingType(
            name='Transport Jig',
            is_safe=True,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/tranport_jig.stl')
        bladeWithTransportJigThingType = ThingType(
            name='Blade With Transport Jig',
            is_safe=True,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/blade_with_transport_jig.stl')
        knifeThingType= ThingType(
            name='Knife',
            is_safe=False,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/knife.stl')
        knifeWithTransportJigThingType = ThingType(
            name='Knife With Transport Jig',
            is_safe=False,
            weight=0,
            mesh_id='package://evd_ros_tasks/description/markers/knife_with_transport_jig.stl')
        self._thing_types = [
            leftHandleThingType,
            rightHandleThingType,
            bladeThingType,
            transportJigThingType,
            bladeWithTransportJigThingType,
            knifeThingType,
            knifeWithTransportJigThingType
        ]

        # Create placeholder things generated by machines
        leftHandlePlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=leftHandleThingType.uuid, 
                name='Left Handle Thing'
            ).to_dct(),
            pending_fields=[
                'position',
                'orientation'
            ])
        rightHandlePlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=rightHandleThingType.uuid, 
                name='Right Handle Thing'
            ).to_dct(),
            pending_fields=[
                'position',
                'orientation'
            ])
        transportJigPlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=transportJigThingType.uuid, 
                name='Transport Jig Placeholder',
                position=Position(0,0,0),
                orientation=Orientation.Identity()
            ).to_dct(),
            pending_fields=[])
        bladePlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=bladeThingType.uuid,
                name='Blade Thing'
            ).to_dct(),
            pending_fields=[
                'position',
                'orientation'
            ])
        bladeWithTransportJigPlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=bladeWithTransportJigThingType.uuid,
                name='Blade with Transport Jig Thing'
            ).to_dct(),
            pending_fields=[
                'position',
                'orientation'
            ])
        knifePlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=knifeThingType.uuid,
                name='Knife Thing'
            ).to_dct(),
            pending_fields=[
                'position',
                'orientation'
            ])
        knifeWithTransportJigPlaceholder = Placeholder(
            pending_node_dct=Thing(
                thing_type_uuid=knifeWithTransportJigThingType.uuid,
                name='Knife with Transport Jig Thing'
            ).to_dct(),
            pending_fields=[
                'position',
                'orientation'
            ])
        self._thing_placeholders = [
            leftHandlePlaceholder,
            rightHandlePlaceholder,
            transportJigPlaceholder,
            bladePlaceholder,
            bladeWithTransportJigPlaceholder,
            knifePlaceholder,
            knifeWithTransportJigPlaceholder
        ]

        # Define Regions
        leftHandleRegion = CubeRegion(
            link='3d_printer_link', 
            center_position=Position(0,0,0),
            center_orientation=Orientation.Identity(),
            uncertainty_x=0.01,
            uncertainty_y=0.01,
            uncertainty_z=0.01)
        rightHandleRegion = CubeRegion(
            link='3d_printer_link', 
            center_position=Position(0,0,0),
            center_orientation=Orientation.Identity(),
            uncertainty_x=0.01,
            uncertainty_y=0.01,
            uncertainty_z=0.01)
        bladeFeederRegion = CubeRegion(
            link='blade_feeder_link',
            center_position=Position(0,0,0),
            center_orientation=Orientation.Identity(),
            uncertainty_x=0.01,
            uncertainty_y=0.01,
            uncertainty_z=0.01)
        knifeFeederRegion = CubeRegion(
            link='knife_feeder_link',
            center_position=Position(0,0,0),
            center_orientation=Orientation.Identity(),
            uncertainty_x=0.01,
            uncertainty_y=0.01,
            uncertainty_z=0.01)
        bladeAssemblyRegion = CubeRegion(
            link='assembly_jig_link',
            center_position=Position(0,0,0),
            center_orientation=Orientation.Identity(),
            uncertainty_x=0.01,
            uncertainty_y=0.01,
            uncertainty_z=0.01)
        self._regions = [
            leftHandleRegion,
            rightHandleRegion,
            bladeFeederRegion,
            knifeFeederRegion,
            bladeAssemblyRegion
        ]

        # Define Collison
        printerCollisionMesh = CollisionMesh(
            name='3D Printer Collision Mesh',
            link='3d_printer_link', 
            mesh_id='package://evd_ros_tasks/description/meshes/collision/3d_printer.stl')
        pedestalCollisionMesh = CollisionMesh(
            name="Pedestal Collision Mesh", 
            link='ur3e_pedestal_link', 
            mesh_id='package://evd_ros_tasks/description/meshes/collision/pedestal.stl')
        tableCollisionMesh = CollisionMesh(
            name="Table Collision Mesh", 
            link='table_link', 
            mesh_id='package://evd_ros_tasks/description/meshes/collision/table.stl')
        assemblyJigCollisionMesh = CollisionMesh(
            name="Assembly Jig Collision Mesh",
            link="assembly_jig_link",
            mesh_id="package://evd_ros_tasks/description/meshes/collision/assembly_jig.stl")
        bladeConveyorCollisionMesh = CollisionMesh(
            name="Blade Conveyor Collision Mesh",
            link="blade_conveyor_link",
            mesh_id="package://evd_ros_tasks/description/meshes/collision/conveyor.stl")
        bladeFeederCollisionMesh = CollisionMesh(
            name="Blade Feeder Collision Mesh",
            link="blade_feeder_link",
            mesh_id="package://evd_ros_tasks/description/meshes/collision/blade_feeder.stl")
        knifeConveyorCollisionMesh = CollisionMesh(
            name="Knife Conveyor Collision Mesh",
            link="knife_conveyor_link",
            mesh_id="package://evd_ros_tasks/description/meshes/collision/conveyor.stl")
        knifeFeederCollisionMesh = CollisionMesh(
            name="Knife Feeder Collision Mesh",
            link="knife_feeder_link",
            mesh_id="package://evd_ros_tasks/description/meshes/collision/knife_feeder.stl")
        self._collision_meshes = [
            printerCollisionMesh,
            pedestalCollisionMesh,
            tableCollisionMesh,
            assemblyJigCollisionMesh,
            bladeConveyorCollisionMesh,
            bladeFeederCollisionMesh,
            knifeConveyorCollisionMesh,
            knifeFeederCollisionMesh
        ]

        # Define Occupancy
        robotOccupancyZone = OccupancyZone(
            name="Robot Occupancy Zone", 
            occupancyType=OccupancyZone.ROBOT_TYPE, 
            sclX=1.6, sclZ=1.2, height=-0.8)
        humanWorkspaceOccupancyZone = OccupancyZone(
            name="Human Workspace Occupancy Zone", 
            occupancyType=OccupancyZone.HUMAN_TYPE, 
            posZ=1, sclX=2, height=-0.8)
        humanCorridorOccupancyZone = OccupancyZone(
            name="Human Corridor Occupancy Zone", 
            occupancyType=OccupancyZone.HUMAN_TYPE, 
            posZ=-1, sclX=2, height=-0.8)
        self._occupancy_zones = [
            robotOccupancyZone,
            humanWorkspaceOccupancyZone,
            humanCorridorOccupancyZone
        ]

        # Define Machines
        printerMachine = Machine(
            name='3D Printer Machine',
            uuid=MACHINE_UUID_3D_PRINTER,
            inputs={},
            outputs={
                leftHandleThingType.uuid: [
                    {
                        'region_uuid': leftHandleRegion.uuid,
                        'quantity': 1,
                        'placeholder_uuids': [
                            leftHandlePlaceholder.uuid
                        ]
                    }
                ],
                rightHandleThingType.uuid: [
                    {
                        'region_uuid': rightHandleRegion.uuid,
                        'quantity': 1,
                        'placeholder_uuids':[
                            rightHandlePlaceholder.uuid
                        ]
                    }
                ]
            },   
            passive=False,
            process_time=PROCESS_TIME_3D_PRINTER,
            link='3d_printer_link', 
            mesh_id='package://evd_ros_tasks/description/meshes/visual/3d_printer.stl',
            collision_mesh_uuid=printerCollisionMesh.uuid)
        assemblyJigUnsafeMachine = Machine(
            name="Assembly Jig Machine",
            uuid=MACHINE_UUID_ASSEMBLY_JIG,
            inputs={
                bladeThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1
                },
                leftHandleThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1
                },
                rightHandleThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1
                }
            },
            outputs={
                knifeThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1,
                    'placeholder_uuids': [
                        knifePlaceholder.uuid
                    ]
                }
            },
            passive=True,
            process_time=PROCESS_TIME_ASSEMBLY_JIG,
            link='assembly_jig_link',
            mesh_id='package://evd_ros_tasks/description/meshes/visual/assembly_jig.stl',
            collision_mesh_uuid=assemblyJigCollisionMesh.uuid)
        assemblyJigSafeMachine = Machine(
            name="Assembly Jig Machine",
            uuid=MACHINE_UUID_ASSEMBLY_JIG,
            inputs={
                bladeWithTransportJigThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1
                },
                leftHandleThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1
                },
                rightHandleThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1
                }
            },
            outputs={
                knifeWithTransportJigThingType.uuid: {
                    'region_uuid': bladeAssemblyRegion.uuid,
                    'quantity': 1,
                    'placeholder_uuids': [
                        knifeWithTransportJigPlaceholder.uuid
                    ]
                }
            },
            passive=True,
            process_time=PROCESS_TIME_ASSEMBLY_JIG,
            link='assembly_jig_link',
            mesh_id='package://evd_ros_tasks/description/meshes/visual/assembly_jig.stl',
            collision_mesh_uuid=assemblyJigCollisionMesh.uuid)
        bladeConveyorMachine = Machine(
            name="Blade Conveyor Machine",
            uuid=MACHINE_UUID_BLADE_CONVEYOR,
            inputs={},
            outputs={
                bladeThingType.uuid: {
                    'region_uuid': bladeFeederRegion.uuid,
                    'quantity': 1,
                    'placeholder_uuids': [
                        bladePlaceholder.uuid
                    ]
                }
            },
            passive=False,
            process_time=PROCESS_TIME_BLADE_CONVEYOR,
            link='blade_conveyor_link',
            mesh_id='package://evd_ros_tasks/description/meshes/visual/conveyor.stl',
            collision_mesh_uuid=bladeConveyorCollisionMesh.uuid)
        bladeFeederMachine = Machine(
            name="Blade Feeder Machine",
            uuid=MACHINE_UUID_BLADE_FEEDER,
            inputs={
                bladeThingType.uuid: {
                    'region_uuid': bladeFeederRegion.uuid,
                    'quantity': 1
                }
            },
            outputs={
                bladeWithTransportJigThingType.uuid: {
                    'region_uuid': bladeFeederRegion.uuid,
                    'quantity': 1,
                    'placeholder_uuids': [
                        knifeWithTransportJigPlaceholder.uuid
                    ]
                }
            },
            passive=False,
            process_time=PROCESS_TIME_BLADE_FEEDER,
            link='blade_feeder_link',
            mesh_id='package://evd_ros_tasks/description/meshes/visual/blade_feeder.stl',
            collision_mesh_uuid=bladeFeederCollisionMesh.uuid)
        knifeFeederMachine = Machine(
            name="Knife Feeder Machine",
            uuid=MACHINE_UUID_KNIFE_FEEDER,
            inputs={
                knifeWithTransportJigThingType.uuid: {
                    'region_uuid': knifeFeederRegion.uuid,
                    'quality': 1
                }
            },
            outputs={
                knifeThingType.uuid: {
                    'region_uuid': knifeFeederRegion.uuid,
                    'quality': 1,
                    'placeholder_uuids': [
                        knifePlaceholder.uuid
                    ]
                }
            },
            passive=True,
            process_time=PROCESS_TIME_KNIFE_FEEDER,
            link='knife_feeder_link',
            mesh_id='package://evd_ros_tasks/description/meshes/visual/knife_feeder.stl',
            collision_mesh_uuid=knifeFeederCollisionMesh.uuid)
        knifeConveyorMachine = Machine(
            name="Blade Conveyor Machine",
            uuid=MACHINE_UUID_KNIFE_CONVEYOR,
            inputs={
                knifeThingType.uuid: {
                    'region_uuid': knifeFeederRegion.uuid,
                    'quantity': 1
                }
            },
            passive=False,
            outputs={},
            process_time=PROCESS_TIME_KNIFE_CONVEYOR,
            link='knife_conveyor_link',
            mesh_id='package://evd_ros_tasks/description/meshes/visual/conveyor.stl',
            collision_mesh_uuid=knifeConveyorCollisionMesh.uuid)

        self._machines = [
            printerMachine,
            assemblyJigUnsafeMachine,
            assemblyJigSafeMachine,
            bladeConveyorMachine,
            bladeFeederMachine,
            knifeConveyorMachine,
            knifeFeederMachine
        ]

        # Define some debug locations
        homeLoc = Location(
            position=Position(0,0,0),
            orientation=Orientation.Identity(),
            link='app')
        unitLoc = Location(
            position=Position(1,1,1),
            orientation=Orientation.Identity(),
            link='app')
        reachableLoc = Location(
            position=Position(0.2,-0.1,0.1),
            orientation=Orientation.Identity(),
            link='app')
        self._locations = [
            unitLoc,
            reachableLoc,
            homeLoc
        ]

        # Define some debug trajectories
        traj1 = Trajectory(unitLoc.uuid, homeLoc.uuid, move_type="ee_ik", velocity=1)
        traj2 = Trajectory(homeLoc.uuid, reachableLoc.uuid, move_type="joint",velocity=1)
        traj3 = Trajectory(reachableLoc.uuid, homeLoc.uuid, move_type="ee_ik",velocity=1)
        self._trajectories = [
            traj1,
            traj2,
            traj3
        ]

        # ROS Interface
        self._program = FrontendInterface(use_registration=True, register_cb=self._call_to_register)

    def _call_to_register(self):
        dct_list = []

        dct_list.append(self._reach_sphere.to_dct())
        dct_list.extend([p.to_dct() for p in self._pinch_points])
        dct_list.extend([t.to_dct() for t in self._thing_types])
        dct_list.extend([p.to_dct() for p in self._thing_placeholders])
        dct_list.extend([r.to_dct() for r in self._regions])
        dct_list.extend([c.to_dct() for c in self._collision_meshes])
        dct_list.extend([o.to_dct() for o in self._occupancy_zones])
        dct_list.extend([m.to_dct() for m in self._machines])
        
        if self._debug:
            dct_list.extend([l.to_dct() for l in self._locations])
            dct_list.extend([t.to_dct() for t in self._trajectories])

        self._program.register(dct_list)

        print('workcell-registered')


if __name__ == "__main__":
    rospy.init_node('register_static_workcell')

    debug = rospy.get_param('debug',True)

    node = URRobotEnvironment(debug)
    rospy.spin()