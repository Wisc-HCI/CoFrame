'''
Placeholder acts as substitute for other node in EvD that spawn from regions. If you 
are familiar with Promises from javascript, this is similar.

When machines operate, they produce things according to a thing_type. Until they do, there
is no actual thing. However, in order to program evd we need to explicitly represent a
node that acts as a thing beforehand.

Likewise, it would be nice to have variable locations that get generated by a region. This
way we can do palletization things.

Both of these can be accomplished by promising a type (templated dict to convert into a node)
and a set of fields subject to change. 
'''


from .. import ARBITRARY_OBJ_TYPE, STRING_TYPE
from ..node import Node


class Placeholder(Node):

    '''
    Data structure methods
    '''

    @classmethod
    def display_name(cls):
        return 'Placeholder'

    @classmethod
    def type_string(cls, trailing_delim=True):
        return 'placeholder' + ('.' if trailing_delim else '')

    @classmethod
    def full_type_string(cls):
        return Node.full_type_string() + cls.type_string()

    @classmethod
    def template(cls):
        template = Node.template()
        template['fields'].append({
            'type': ARBITRARY_OBJ_TYPE,
            'key': 'pending_node',
            'is_uuid': False,
            'is_list': False
        })
        template['fields'].append({
            'type': STRING_TYPE,
            'key': 'type',
            'is_uuid': False,
            'is_list': False
        })
        template['fields'].append({
            'type': STRING_TYPE,
            'key': 'pending_fields',
            'is_uuid': False,
            'is_list': False
        })
        return template

    def __init__(self):
        pass
