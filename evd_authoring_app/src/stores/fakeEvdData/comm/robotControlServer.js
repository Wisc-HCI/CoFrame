/***************************************************************** 
* Robot Control Server
* - Token Blob
* - RCS interface
* - ROS Msgs
*****************************************************************/

/*
 * Subscribe to 'robot_control_server/at_start' -> Bool     (True when program starts)
 * Subscribe to 'robot_control_server/at_end' -> Bool       (True when program ends)
 * Subscribe to 'robot_control_server/lockout' -> Bool      (True while program running)
 * Subscribe to 'robot_control_server/status' -> ProgramRunnerStatus
 * Subscribe to 'robot_control_server/tokens' -> String (JSON blob)
 * Subscribe to 'robot_control_server/error' -> String      (A human readable error message)
 * 
 * Publish to 'robot_control_server/play' <- Empty "{}"     (Commands server to run)
 * Publish to 'robot_control_server/stop' <- Empty          
 * Publish to 'robot_control_server/pause' <- Empty         (This one might not work in final version?)
 * Publish to 'robot_control_server/reset' <- Empty
 * 
 * Service 'robot_control_server/set_root_node' <- SetRootNodeRequest, SetRootNodeResponse
 * Service 'robot_control_server/get_root_node' <- GetRootNodeRequest, GetRootNodeResponse
 */

let rcs_tokens = {
    robot: {
        type: 'robot',
        state: {
            position: {x:0, y:0, z:0}, // EE relative to world, these values can also be '?' at start
            orientation: {x:0, y:0, z:0, w:0},
            joints: ['?'], // current joint state of robot or ['?'] if unknown
            gripper: {
                position: 0, //current gripper state or '?' if unknown
                grasped_thing: null, // either null if no thing grasped or string uuid of thing being grasped
                ambigous_flag: false // true if gripper is ever actuated without proper semantics and thing association (except in initialize)
            }
        }
    },
    'machine-js-0': {
        type: 'machine',
        state: '?'  // '?' at start, otherwise of [idle, pause, running, error]
    },
    /*...*/ //for all machines
    'thing-js-0': {
        type: 'thing',
        state: {
            position: {x:0, y:0, z:0}, // or ? for each
            orientation: {x:0, y:0, z:0}
        }
    },
    /*...*/ //for all things (including the ones going to be generated by machines)
};

const ProgramRunnerStatus = {
    uuid: '', //string of active primitive
    //TODO: define status/state structure for highlighting from this UUID
    start_time: 0, //floating point start time from time.time() (-1 if not set)
    previous_time: 0.1, // last timestep time (-1 if not set)
    current_time: 0.3,  // current timestep time (-1 if not set)
    stop_time: -1       // final execution time (only set at the end)
};

const SetRootNodeRequest = {
    uuid: '', //string uuid of node in program to be considered root for execution if empty string then defaults to program
};

const SetRootNodeResponse = {
    status: true, // boolean indicating operation was succesful
    message: '', //human readable error message if node was not found or otherwise unable to be set
};

const GetRootNodeRequest = {
    // Purposefully empty
};

const GetRootNodeResponse = {
    uuid: '' //string uuid of node in program to be considered root for execution if empty string then defaults to program
};

//=================================================================

/// Export
const fields = {
    rcs_tokens,
    ProgramRunnerStatus,
    SetRootNodeRequest,
    SetRootNodeResponse,
    GetRootNodeRequest,
    GetRootNodeResponse,
};

export default fields;